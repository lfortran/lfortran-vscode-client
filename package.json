{
    "name": "LFortran",
    "description": "VSCode extension for the LFortran language server.",
    "icon": "images/lfortran.png",
    "author": "LCompilers",
    "license": "MIT",
    "version": "0.0.6",
    "repository": {
        "type": "git",
        "url": "https://github.com/lfortran/lfortran-vscode-client"
    },
    "publisher": "LCompilers",
    "categories": [],
    "keywords": [
        "multi-root ready"
    ],
    "engines": {
        "vscode": "^1.63.0"
    },
    "activationEvents": [
        "onLanguage:fortran"
    ],
    "main": "./out/extension.js",
    "contributes": {
        "languages": [
            {
                "id": "fortran",
                "aliases": [
                    "lfortran"
                ],
                "extensions": [
                    ".f",
                    ".for",
                    ".f90",
                    ".f95",
                    ".f03"
                ],
                "configuration": "./language-configuration.json"
            }
        ],
        "configuration": {
            "type": "object",
            "title": "LFortran",
            "properties": {
                "LFortran.openIssueReporterOnError": {
                    "scope": "window",
                    "type": "boolean",
                    "default": false,
                    "description": "Open a bug report if an internal error occurs."
                },
                "LFortran.maxNumberOfProblems": {
                    "scope": "window",
                    "type": "number",
                    "default": 100,
                    "description": "Maximum number of errors and warnings to report."
                },
                "LFortran.trace.server": {
                    "scope": "window",
                    "type": "string",
                    "enum": [
                        "off",
                        "messages",
                        "verbose"
                    ],
                    "default": "off",
                    "description": "Traces the communication between the language client and server."
                },
                "LFortran.compiler.path": {
                    "scope": "window",
                    "type": "string",
                    "default": "lfortran",
                    "description": "Path to the LFortran compiler executable."
                },
                "LFortran.compiler.flags": {
                    "scope": "resource",
                    "type": "array",
                    "item": {
                        "type": "string"
                    },
                    "default": [],
                    "description": "Additional flags to pass to the LFortran compiler."
                },
                "LFortran.log.path": {
                    "scope": "window",
                    "type": "string",
                    "default": "lfortran-language-server.log",
                    "description": "Where the log file should be written."
                },
                "LFortran.log.level": {
                    "scope": "window",
                    "type": "string",
                    "enum": [
                        "off",
                        "fatal",
                        "error",
                        "warn",
                        "info",
                        "debug",
                        "trace",
                        "all"
                    ],
                    "default": "info",
                    "description": "Lowest level of logs to include in the extension's console output."
                },
                "LFortran.log.prettyPrint": {
                    "scope": "window",
                    "type": "boolean",
                    "default": true,
                    "description": "Whether to pretty-print JSON objects and arrays."
                },
                "LFortran.indentSize": {
                    "scope": "window",
                    "type": "number",
                    "default": 4,
                    "description": "Number of spaces for each level of indentation."
                },
                "LFortran.timeoutMs": {
                    "scope": "window",
                    "type": "number",
                    "default": 100,
                    "description": "Number of milliseconds to await requests from server-to-client."
                },
                "LFortran.retry.maxAttempts": {
                    "scope": "window",
                    "type": "number",
                    "default": 3,
                    "description": "Maximum number of times to attempt a request before giving up."
                },
                "LFortran.retry.minSleepTimeMs": {
                    "scope": "window",
                    "type": "number",
                    "default": 10,
                    "description": "Minimum number of milliseconds to wait between request attempts."
                },
                "LFortran.retry.maxSleepTimeMs": {
                    "scope": "window",
                    "type": "number",
                    "default": 300,
                    "description": "Maximum number of milliseconds to wait between request attempts."
                },
                "LFortran.execution.strategy": {
                    "scope": "window",
                    "type": "string",
                    "enum": [
                        "concurrent",
                        "parallel"
                    ],
                    "default": "concurrent",
                    "description": "Whether to handle requests concurrently (single-threaded) or in parallel (multi-threaded). Changes to this setting may require a restart."
                },
                "LFortran.telemetry.enabled": {
                    "scope": "window",
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to enable telemetry events (may require a restart)."
                },
                "LFortran.telemetry.frequencyMs": {
                    "scope": "window",
                    "type": "number",
                    "default": 1000,
                    "description": "Number of milliseconds to wait between telemetry events."
                }
            }
        }
    },
    "scripts": {
        "postinstall": "cd client && npm install && cd ..",
        "compile": "npm run check-types && node esbuild.js",
        "check-types": "tsc --noEmit",
        "watch": "npm-run-all -p watch:*",
        "watch:esbuild": "node esbuild.js --watch",
        "watch:tsc": "tsc --noEmit --watch --project tsconfig.json",
        "vscode:prepublish": "npm run package",
        "lint": "eslint ./client/src",
        "package": "npm run check-types && node esbuild.js --production"
    },
    "devDependencies": {
        "@aws-sdk/client-s3": "^3.758.0",
        "@eslint/js": "^9.21.0",
        "@types/node": "^22.13.9",
        "@typescript-eslint/eslint-plugin": "^8.26.0",
        "@typescript-eslint/parser": "^8.26.0",
        "@vscode/vsce": "^3.2.2",
        "esbuild": "^0.25.0",
        "eslint": "^9.21.0",
        "globals": "^16.0.0",
        "tsx": "^4.19.3",
        "typescript": "^5.8.2",
        "typescript-eslint": "^8.26.0"
    },
    "dependencies": {
        "source-map-support": "^0.5.21"
    }
}
